// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelepathyLabs.ShowReels.Domain.Data;

namespace TelepathyLabs.ShowReels.Domain.Migrations
{
    [DbContext(typeof(TelepathyLabsDbContext))]
    [Migration("20220901182506_Initi")]
    partial class Initi
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.ShowReel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<short>("VideoDefinition")
                        .HasColumnType("smallint")
                        .HasColumnName("VideoDefinition");

                    b.Property<short>("VideoStandard")
                        .HasColumnType("smallint")
                        .HasColumnName("VideoStandard");

                    b.HasKey("Id");

                    b.ToTable("ShowReels");
                });

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.TimeCode", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("Frames")
                        .HasColumnType("int")
                        .HasColumnName("Frames");

                    b.Property<int>("FramesPerSecond")
                        .HasColumnType("int")
                        .HasColumnName("FramesPerSecond");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("Hours");

                    b.Property<int>("Minutes")
                        .HasColumnType("int")
                        .HasColumnName("Minutes");

                    b.Property<int>("Seconds")
                        .HasColumnType("int")
                        .HasColumnName("Seconds");

                    b.HasKey("Id");

                    b.ToTable("TimeCodes");
                });

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.VideoClip", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<int?>("ShowReelId")
                        .HasColumnType("int");

                    b.Property<int?>("StartTimeCodeId")
                        .HasColumnType("int");

                    b.Property<short>("VideoDefinition")
                        .HasColumnType("smallint")
                        .HasColumnName("VideoDefinition");

                    b.Property<short>("VideoStandard")
                        .HasColumnType("smallint")
                        .HasColumnName("VideoStandard");

                    b.HasKey("Id");

                    b.HasIndex("ShowReelId");

                    b.HasIndex("StartTimeCodeId");

                    b.ToTable("VideoClips");
                });

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.TimeCode", b =>
                {
                    b.HasOne("TelepathyLabs.ShowReels.Domain.Entity.VideoClip", null)
                        .WithOne("EndTimeCode")
                        .HasForeignKey("TelepathyLabs.ShowReels.Domain.Entity.TimeCode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.VideoClip", b =>
                {
                    b.HasOne("TelepathyLabs.ShowReels.Domain.Entity.ShowReel", null)
                        .WithMany("VideoClips")
                        .HasForeignKey("ShowReelId");

                    b.HasOne("TelepathyLabs.ShowReels.Domain.Entity.TimeCode", "StartTimeCode")
                        .WithMany()
                        .HasForeignKey("StartTimeCodeId");

                    b.Navigation("StartTimeCode");
                });

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.ShowReel", b =>
                {
                    b.Navigation("VideoClips");
                });

            modelBuilder.Entity("TelepathyLabs.ShowReels.Domain.Entity.VideoClip", b =>
                {
                    b.Navigation("EndTimeCode");
                });
#pragma warning restore 612, 618
        }
    }
}
