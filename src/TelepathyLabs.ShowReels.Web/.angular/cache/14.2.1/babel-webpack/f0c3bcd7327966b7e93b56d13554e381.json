{"ast":null,"code":"export class TimeCode {\n  constructor(hours, minutes, seconds, frames, framesPerSecond) {\n    this.minutesPerHour = 60;\n    this.secondsPerMinute = 60;\n    this.secondsPerHour = 3600;\n\n    if (frames >= framesPerSecond) {\n      throw new Error(\"Frames should be less than frame rate.\");\n    }\n\n    if (framesPerSecond <= 1) {\n      throw new Error(\"Frame rate should be greater than 1\");\n    }\n\n    if (hours < 0 || minutes < 0 || seconds < 0 || frames < 0) {\n      throw new Error(\"Hour, Minute, Second and Frame parameters should be positive.\");\n    }\n\n    if (minutes >= this.minutesPerHour || seconds >= this.secondsPerMinute) {\n      throw new Error(\"Minute and second parameters should be less than 60.\");\n    }\n\n    this.hours = hours;\n    this.minutes = minutes;\n    this.seconds = seconds;\n    this.frames = frames;\n    this.framesPerSecond = framesPerSecond;\n  }\n\n  get Hours() {\n    return this.hours;\n  }\n\n  get Minutes() {\n    return this.minutes;\n  }\n\n  get Seconds() {\n    return this.seconds;\n  }\n\n  get Frames() {\n    return this.frames;\n  }\n\n  get FramesPerSecond() {\n    return this.framesPerSecond;\n  }\n\n  get TotalFrames() {\n    return this.frames + (this.seconds + this.minutes * this.secondsPerMinute + this.Hours * this.secondsPerHour) * this.framesPerSecond;\n  }\n\n  Add(timeCode) {\n    this.AssertFrameRate(this, timeCode);\n    var totalFrames = this.frames + timeCode.Frames;\n    var framesToPromote = Math.floor(totalFrames / this.FramesPerSecond);\n    var frames = totalFrames % this.FramesPerSecond;\n    var totalSeconds = this.Seconds + timeCode.Seconds + framesToPromote;\n    var secondsToPromote = Math.floor(totalSeconds / this.secondsPerMinute);\n    var seconds = totalSeconds % this.secondsPerMinute;\n    var totalMinutes = this.Minutes + timeCode.Minutes + secondsToPromote;\n    var minutesToPromote = Math.floor(totalMinutes / this.minutesPerHour);\n    var minutes = totalMinutes % this.minutesPerHour;\n    var totalHours = this.Hours + timeCode.Hours + minutesToPromote;\n    return new TimeCode(totalHours, minutes, seconds, frames, this.FramesPerSecond);\n  }\n\n  IsLargerThan(timeCode) {\n    this.AssertFrameRate(this, timeCode);\n    return this.TotalFrames > timeCode.TotalFrames;\n  }\n\n  IsEqualTo(timeCode) {\n    this.AssertFrameRate(this, timeCode);\n    return this.TotalFrames === timeCode.TotalFrames;\n  }\n\n  get ToString() {\n    return `${String(isNaN(this.hours) ? 0 : this.hours).padStart(2, \"0\")}:${String(isNaN(this.minutes) ? 0 : this.minutes).padStart(2, \"0\")}:${String(isNaN(this.seconds) ? 0 : this.seconds).padStart(2, \"0\")}:${String(isNaN(this.frames) ? 0 : this.frames).padStart(2, \"0\")}`;\n  }\n\n  AssertFrameRate(a, b) {\n    if (a.FramesPerSecond != b.FramesPerSecond) {\n      throw new Error(\"Frame rates doesn't match.\");\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}