{"ast":null,"code":"import { TimeCode } from \"./time-code\";\nexport class ShowReel {\n  constructor(name, description, videoDefinition, videoStandard, videoClips) {\n    if (!name) {\n      throw new Error(\"Name cannot be null or empty.\");\n    }\n\n    if (!description) {\n      throw new Error(\"Description cannot be null or empty.\");\n    }\n\n    if (!videoClips || videoClips.length < 1) {\n      throw new Error(\"At least on video clip is required.\");\n    }\n\n    var isVideoStandardnNotConsistant = videoClips.filter(v => v.VideoStandard === videoStandard).length !== videoClips.length;\n\n    if (isVideoStandardnNotConsistant) {\n      throw new Error(\"All video clips must have same video standard as the show reel.\");\n    }\n\n    var isVideoDefinitionNotConsistant = videoClips.filter(v => v.VideoDefinition === videoDefinition).length !== videoClips.length;\n\n    if (isVideoDefinitionNotConsistant) {\n      throw new Error(\"All video clips must have same video definition as the show reel.\");\n    }\n\n    for (let x = 1; x < videoClips.length; x++) {\n      if (videoClips[x - 1].EndTimeCode.IsLargerThan(videoClips[x].StartTimeCode) || videoClips[x - 1].EndTimeCode.IsEqualTo(videoClips[x].StartTimeCode)) {\n        throw new Error(\"Video clips cannot overlap.\");\n      }\n    }\n\n    this.name = name;\n    this.description = description;\n    this.videoStandard = videoStandard;\n    this.videoDefinition = videoDefinition;\n    this.videoClips = videoClips;\n  }\n\n  get Name() {\n    return this.name;\n  }\n\n  get Description() {\n    return this.description;\n  }\n\n  get VideoDefinition() {\n    return this.videoDefinition;\n  }\n\n  get VideoStandard() {\n    return this.videoStandard;\n  }\n\n  get VideoClips() {\n    return this.videoClips;\n  }\n\n  get TotalDuration() {\n    let totalDuration = this.VideoClips.length > 0 ? this.VideoClips[this.VideoClips.length - 1].EndTimeCode : new TimeCode(0, 0, 0, 0, 10);\n    return totalDuration.ToString;\n  }\n\n  AddClip(videoClip) {\n    if (videoClip.VideoStandard !== this.VideoStandard) {\n      throw new Error(\"Clip should be in same video standard as the show reel.\");\n    }\n\n    if (videoClip.VideoDefinition !== this.VideoDefinition) {\n      throw new Error(\"Clip should be in same video definition as the show reel.\");\n    }\n\n    let lastVideoEndTimeCode = this.VideoClips[this.VideoClips.length - 1].EndTimeCode;\n\n    if (lastVideoEndTimeCode.IsLargerThan(videoClip.StartTimeCode) || lastVideoEndTimeCode.IsEqualTo(videoClip.StartTimeCode)) {\n      throw new Error(\"Video clips cannot overlap.\");\n    }\n\n    this.VideoClips.push(videoClip);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}